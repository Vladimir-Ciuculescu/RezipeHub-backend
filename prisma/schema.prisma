generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum social_provider_enum {
  GOOGLE
  FACEBOOK
}

enum token_type {
  ACCOUNT_VERIFICATION
  PASSWORD_RESET
}

model users {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  username       String?        @unique
  firstName      String         @map("first_name")
  lastName       String         @map("last_name")
  password       String?
  isVerified     Boolean        @default(false) @map("is_verified")
  refreshToken   String?        @map("refresh_token") @db.VarChar(256)
  tokens         tokens[]
  socialProvider auth_methods[]
  recipes        recipes[]
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedtAt     DateTime       @default(now()) @map("updated_at")
}

model auth_methods {
  id         Int                   @id @default(autoincrement())
  provider   social_provider_enum?
  providerId String?               @map("provider_id")
  userId     Int                   @map("user_id")
  user       users                 @relation(fields: [userId], references: [id])
  createdAt  DateTime              @default(now()) @map("created_at")

  @@unique([provider, providerId])
}

model tokens {
  id        Int        @id @default(autoincrement())
  token     String
  type      token_type
  expiresAt DateTime   @map("expires_at")
  userId    Int        @map("user_id")
  user      users      @relation(fields: [userId], references: [id])
}

model recipes {
  id          Int                   @id @default(autoincrement())
  user        users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  title       String
  servings    Int
  photoUrl    String?
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedtAt  DateTime              @default(now()) @map("updated_at")
  ingredients recipes_ingredients[]
  steps       steps[]
}

model ingredients {
  id       Int                   @id @default(autoincrement())
  name     String
  unit     String
  quantity Int
  calories Float
  carbs    Float
  proteins Float
  fats     Float
  recipes  recipes_ingredients[]
}

model recipes_ingredients {
  id           Int         @id @default(autoincrement())
  recipe       recipes     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     Int
  ingredient   ingredients @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId Int
}

model steps {
  id       Int     @id @default(autoincrement())
  recipe   recipes @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
  step     Int
  text     String
}
