generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum social_provider_enum {
  GOOGLE
  FACEBOOK
}

enum token_type {
  ACCOUNT_VERIFICATION
  PASSWORD_RESET
}

model users {
  id                   Int               @id @default(autoincrement())
  email                String            @unique
  username             String?           @unique
  firstName            String            @map("first_name")
  lastName             String            @map("last_name")
  password             String?
  photoUrl             String?           @map("photo_url")
  bio                  String            @default("")
  isVerified           Boolean           @default(false) @map("is_verified")
  refreshToken         String?           @map("refresh_token") @db.VarChar(256)
  tokens               tokens[]
  socialProvider       auth_methods[]
  recipes              recipes[]
  devices              user_devices[]
  notifications        notifications[]
  notificationsAsActor notifications[]   @relation("NotificationActor")
  users_favorites      users_favorites[]
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedtAt           DateTime          @default(now()) @map("updated_at")
}

model user_devices {
  id                   Int     @id @default(autoincrement())
  userId               Int     @map("user_id")
  user                 users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceToken          String? @unique @map("device_token")
  deviceType           String
  badgeCount           Int     @default(0)
  notificationsEnabled Boolean @default(true) @map("notifications_enabled")

  @@index([userId])
}

model notifications {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  actorId   Int?     @map("actor_id")
  actor     users?   @relation("NotificationActor", fields: [actorId], references: [id], onDelete: SetNull)
  title     String
  body      String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt])
}

model auth_methods {
  id         Int                   @id @default(autoincrement())
  provider   social_provider_enum?
  providerId String?               @map("provider_id")
  userId     Int                   @map("user_id")
  user       users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime              @default(now()) @map("created_at")

  @@unique([provider, providerId])
}

model tokens {
  id        Int        @id @default(autoincrement())
  token     String
  type      token_type
  expiresAt DateTime   @map("expires_at")
  userId    Int        @map("user_id")
  user      users      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model recipes {
  id              Int                   @id @default(autoincrement())
  user            users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int                   @map("user_id")
  title           String
  servings        Int
  photoUrl        String?               @map("photo_url")
  type            String
  preparationTime Int                   @map("preparation_time")
  viewCount       Int                   @default(0) @map("view_count")
  ingredients     recipes_ingredients[]
  user_favorites  users_favorites[]
  steps           steps[]
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @default(now()) @map("updated_at")
}

model ingredients {
  id     Int                   @id @default(autoincrement())
  foodId String                @unique @map("food_id")
  name   String
  // units   ingredient_units[]
  units  recipes_ingredients[]
}

model units {
  id          Int                   @id @default(autoincrement())
  uri         String                @unique
  label       String                @unique
  ingredients recipes_ingredients[]
}

model recipes_ingredients {
  id           Int         @id @default(autoincrement())
  recipe       recipes     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     Int         @map("recipe_id")
  ingredient   ingredients @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId Int         @map("ingredient_id")
  unit         units       @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId       Int         @map("unit_id")
  quantity     Decimal     @db.Decimal(10, 2)
  calories     Float       @default(0.00)
  carbs        Decimal?    @db.Decimal(10, 2)
  proteins     Decimal?    @db.Decimal(10, 2)
  fats         Decimal?    @db.Decimal(10, 2)
}

model users_favorites {
  id        Int      @id @default(autoincrement())
  recipe    recipes  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  Int      @map("recipe_id")
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([recipeId, userId])
}

model steps {
  id       Int     @id @default(autoincrement())
  recipe   recipes @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int     @map("recipe_id")
  step     Int
  text     String
}
